{"version":3,"sources":["webpack://stringQuoteX/webpack/universalModuleDefinition","webpack://stringQuoteX/webpack/bootstrap","webpack://stringQuoteX/./node_modules/is-symbol/index.js","webpack://stringQuoteX/(webpack)/buildin/global.js","webpack://stringQuoteX/./node_modules/json3/lib/json3.js","webpack://stringQuoteX/./node_modules/has-symbols/index.js","webpack://stringQuoteX/./node_modules/has-symbols/shams.js","webpack://stringQuoteX/(webpack)/buildin/module.js","webpack://stringQuoteX/(webpack)/buildin/amd-options.js","webpack://stringQuoteX/../src/attempt-x.js","webpack://stringQuoteX/../src/has-symbol-support-x.js","webpack://stringQuoteX/../src/to-string-symbols-supported-x.js","webpack://stringQuoteX/../src/string-quote-x.js"],"names":["root","factory","exports","module","define","amd","self","window","global","Function","installedModules","__webpack_require__","moduleId","i","l","modules","call","m","c","d","name","getter","o","Object","defineProperty","enumerable","get","r","Symbol","toStringTag","value","t","mode","__esModule","ns","create","key","bind","n","object","property","prototype","hasOwnProperty","p","s","toStr","toString","symToStr","symStringRegex","valueOf","test","isSymbolObject","e","g","this","__WEBPACK_AMD_DEFINE_RESULT__","isLoader","objectTypes","function","freeExports","nodeType","freeGlobal","runInContext","context","Number","String","Date","SyntaxError","TypeError","Math","nativeJSON","JSON","stringify","parse","undefined","objectProto","getClass","isProperty","attempt","func","errorFunc","exception","isExtended","has","isSupported","serialized","stringifySupported","toJSON","a","parseSupported","length","getUTCFullYear","getUTCMonth","getUTCDate","getUTCHours","getUTCMinutes","getUTCSeconds","getUTCMilliseconds","charIndexBuggy","forOwn","callback","Properties","dontEnums","size","isConstructor","isFunction","hasProperty","constructor","Escapes","92","34","8","12","10","13","9","toPaddedString","width","slice","serializeDate","getData","year","month","date","time","hours","minutes","seconds","milliseconds","floor","Months","getDay","dateToJSON","nativeStringify","source","filter","nativeToJSON","result","escapeChar","character","charCode","charCodeAt","escaped","reEscape","quote","lastIndex","replace","serialize","properties","whitespace","indentation","stack","type","className","results","element","index","prefix","push","join","pop","Index","Source","fromCharCode","Unescapes","47","98","116","110","102","114","abort","lex","begin","position","isSigned","charAt","temp","hasMembers","update","walk","previousJSON","JSON3","isRestored","noConflict","origSymbol","hasSymbolSham","getOwnPropertySymbols","iterator","obj","sym","symObj","keys","getOwnPropertyNames","syms","propertyIsEnumerable","getOwnPropertyDescriptor","descriptor","webpackPolyfill","deprecate","paths","children","__webpack_amd_options__","attempt_x_esm","fn","_len","arguments","args","Array","_key","threw","apply","hasSymbolSupport","_newArrowCheck","is_symbol_default","pToString","isSymbolFn","castString","to_string_symbols_supported_x_esm","__webpack_exports__","string","json3"],"mappings":"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","file":"string-quote-x.min.js","sourcesContent":["(function webpackUniversalModuleDefinition(root, factory) {\n\tif(typeof exports === 'object' && typeof module === 'object')\n\t\tmodule.exports = factory();\n\telse if(typeof define === 'function' && define.amd)\n\t\tdefine([], factory);\n\telse if(typeof exports === 'object')\n\t\texports[\"stringQuoteX\"] = factory();\n\telse\n\t\troot[\"stringQuoteX\"] = factory();\n})((function () {\n  'use strict';\n\n  if (typeof self !== 'undefined') {\n    return self;\n  }\n\n  if (typeof window !== 'undefined') {\n    return window;\n  }\n\n  if (typeof global !== 'undefined') {\n    return global;\n  }\n\n  return Function('return this')();\n}()), function() {\nreturn "," \t// The module cache\n \tvar installedModules = {};\n\n \t// The require function\n \tfunction __webpack_require__(moduleId) {\n\n \t\t// Check if module is in cache\n \t\tif(installedModules[moduleId]) {\n \t\t\treturn installedModules[moduleId].exports;\n \t\t}\n \t\t// Create a new module (and put it into the cache)\n \t\tvar module = installedModules[moduleId] = {\n \t\t\ti: moduleId,\n \t\t\tl: false,\n \t\t\texports: {}\n \t\t};\n\n \t\t// Execute the module function\n \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n \t\t// Flag the module as loaded\n \t\tmodule.l = true;\n\n \t\t// Return the exports of the module\n \t\treturn module.exports;\n \t}\n\n\n \t// expose the modules object (__webpack_modules__)\n \t__webpack_require__.m = modules;\n\n \t// expose the module cache\n \t__webpack_require__.c = installedModules;\n\n \t// define getter function for harmony exports\n \t__webpack_require__.d = function(exports, name, getter) {\n \t\tif(!__webpack_require__.o(exports, name)) {\n \t\t\tObject.defineProperty(exports, name, { enumerable: true, get: getter });\n \t\t}\n \t};\n\n \t// define __esModule on exports\n \t__webpack_require__.r = function(exports) {\n \t\tif(typeof Symbol !== 'undefined' && Symbol.toStringTag) {\n \t\t\tObject.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n \t\t}\n \t\tObject.defineProperty(exports, '__esModule', { value: true });\n \t};\n\n \t// create a fake namespace object\n \t// mode & 1: value is a module id, require it\n \t// mode & 2: merge all properties of value into the ns\n \t// mode & 4: return value when already ns object\n \t// mode & 8|1: behave like require\n \t__webpack_require__.t = function(value, mode) {\n \t\tif(mode & 1) value = __webpack_require__(value);\n \t\tif(mode & 8) return value;\n \t\tif((mode & 4) && typeof value === 'object' && value && value.__esModule) return value;\n \t\tvar ns = Object.create(null);\n \t\t__webpack_require__.r(ns);\n \t\tObject.defineProperty(ns, 'default', { enumerable: true, value: value });\n \t\tif(mode & 2 && typeof value != 'string') for(var key in value) __webpack_require__.d(ns, key, function(key) { return value[key]; }.bind(null, key));\n \t\treturn ns;\n \t};\n\n \t// getDefaultExport function for compatibility with non-harmony modules\n \t__webpack_require__.n = function(module) {\n \t\tvar getter = module && module.__esModule ?\n \t\t\tfunction getDefault() { return module['default']; } :\n \t\t\tfunction getModuleExports() { return module; };\n \t\t__webpack_require__.d(getter, 'a', getter);\n \t\treturn getter;\n \t};\n\n \t// Object.prototype.hasOwnProperty.call\n \t__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };\n\n \t// __webpack_public_path__\n \t__webpack_require__.p = \"\";\n\n\n \t// Load entry module and return exports\n \treturn __webpack_require__(__webpack_require__.s = 7);\n","'use strict';\n\nvar toStr = Object.prototype.toString;\nvar hasSymbols = require('has-symbols')();\n\nif (hasSymbols) {\n\tvar symToStr = Symbol.prototype.toString;\n\tvar symStringRegex = /^Symbol\\(.*\\)$/;\n\tvar isSymbolObject = function isRealSymbolObject(value) {\n\t\tif (typeof value.valueOf() !== 'symbol') {\n\t\t\treturn false;\n\t\t}\n\t\treturn symStringRegex.test(symToStr.call(value));\n\t};\n\n\tmodule.exports = function isSymbol(value) {\n\t\tif (typeof value === 'symbol') {\n\t\t\treturn true;\n\t\t}\n\t\tif (toStr.call(value) !== '[object Symbol]') {\n\t\t\treturn false;\n\t\t}\n\t\ttry {\n\t\t\treturn isSymbolObject(value);\n\t\t} catch (e) {\n\t\t\treturn false;\n\t\t}\n\t};\n} else {\n\n\tmodule.exports = function isSymbol(value) {\n\t\t// this environment does not support Symbols.\n\t\treturn false && value;\n\t};\n}\n","var g;\n\n// This works in non-strict mode\ng = (function() {\n\treturn this;\n})();\n\ntry {\n\t// This works if eval is allowed (see CSP)\n\tg = g || new Function(\"return this\")();\n} catch (e) {\n\t// This works if the window reference is available\n\tif (typeof window === \"object\") g = window;\n}\n\n// g can still be undefined, but nothing to do about it...\n// We return undefined, instead of nothing here, so it's\n// easier to handle this case. if(!global) { ...}\n\nmodule.exports = g;\n","/*! JSON v3.3.2 | https://bestiejs.github.io/json3 | Copyright 2012-2015, Kit Cambridge, Benjamin Tan | http://kit.mit-license.org */\n;(function () {\n  // Detect the `define` function exposed by asynchronous module loaders. The\n  // strict `define` check is necessary for compatibility with `r.js`.\n  var isLoader = typeof define === \"function\" && define.amd;\n\n  // A set of types used to distinguish objects from primitives.\n  var objectTypes = {\n    \"function\": true,\n    \"object\": true\n  };\n\n  // Detect the `exports` object exposed by CommonJS implementations.\n  var freeExports = objectTypes[typeof exports] && exports && !exports.nodeType && exports;\n\n  // Use the `global` object exposed by Node (including Browserify via\n  // `insert-module-globals`), Narwhal, and Ringo as the default context,\n  // and the `window` object in browsers. Rhino exports a `global` function\n  // instead.\n  var root = objectTypes[typeof window] && window || this,\n      freeGlobal = freeExports && objectTypes[typeof module] && module && !module.nodeType && typeof global == \"object\" && global;\n\n  if (freeGlobal && (freeGlobal.global === freeGlobal || freeGlobal.window === freeGlobal || freeGlobal.self === freeGlobal)) {\n    root = freeGlobal;\n  }\n\n  // Public: Initializes JSON 3 using the given `context` object, attaching the\n  // `stringify` and `parse` functions to the specified `exports` object.\n  function runInContext(context, exports) {\n    context || (context = root.Object());\n    exports || (exports = root.Object());\n\n    // Native constructor aliases.\n    var Number = context.Number || root.Number,\n        String = context.String || root.String,\n        Object = context.Object || root.Object,\n        Date = context.Date || root.Date,\n        SyntaxError = context.SyntaxError || root.SyntaxError,\n        TypeError = context.TypeError || root.TypeError,\n        Math = context.Math || root.Math,\n        nativeJSON = context.JSON || root.JSON;\n\n    // Delegate to the native `stringify` and `parse` implementations.\n    if (typeof nativeJSON == \"object\" && nativeJSON) {\n      exports.stringify = nativeJSON.stringify;\n      exports.parse = nativeJSON.parse;\n    }\n\n    // Convenience aliases.\n    var objectProto = Object.prototype,\n        getClass = objectProto.toString,\n        isProperty = objectProto.hasOwnProperty,\n        undefined;\n\n    // Internal: Contains `try...catch` logic used by other functions.\n    // This prevents other functions from being deoptimized.\n    function attempt(func, errorFunc) {\n      try {\n        func();\n      } catch (exception) {\n        if (errorFunc) {\n          errorFunc();\n        }\n      }\n    }\n\n    // Test the `Date#getUTC*` methods. Based on work by @Yaffle.\n    var isExtended = new Date(-3509827334573292);\n    attempt(function () {\n      // The `getUTCFullYear`, `Month`, and `Date` methods return nonsensical\n      // results for certain dates in Opera >= 10.53.\n      isExtended = isExtended.getUTCFullYear() == -109252 && isExtended.getUTCMonth() === 0 && isExtended.getUTCDate() === 1 &&\n        isExtended.getUTCHours() == 10 && isExtended.getUTCMinutes() == 37 && isExtended.getUTCSeconds() == 6 && isExtended.getUTCMilliseconds() == 708;\n    });\n\n    // Internal: Determines whether the native `JSON.stringify` and `parse`\n    // implementations are spec-compliant. Based on work by Ken Snyder.\n    function has(name) {\n      if (has[name] != null) {\n        // Return cached feature test result.\n        return has[name];\n      }\n      var isSupported;\n      if (name == \"bug-string-char-index\") {\n        // IE <= 7 doesn't support accessing string characters using square\n        // bracket notation. IE 8 only supports this for primitives.\n        isSupported = \"a\"[0] != \"a\";\n      } else if (name == \"json\") {\n        // Indicates whether both `JSON.stringify` and `JSON.parse` are\n        // supported.\n        isSupported = has(\"json-stringify\") && has(\"date-serialization\") && has(\"json-parse\");\n      } else if (name == \"date-serialization\") {\n        // Indicates whether `Date`s can be serialized accurately by `JSON.stringify`.\n        isSupported = has(\"json-stringify\") && isExtended;\n        if (isSupported) {\n          var stringify = exports.stringify;\n          attempt(function () {\n            isSupported =\n              // JSON 2, Prototype <= 1.7, and older WebKit builds incorrectly\n              // serialize extended years.\n              stringify(new Date(-8.64e15)) == '\"-271821-04-20T00:00:00.000Z\"' &&\n              // The milliseconds are optional in ES 5, but required in 5.1.\n              stringify(new Date(8.64e15)) == '\"+275760-09-13T00:00:00.000Z\"' &&\n              // Firefox <= 11.0 incorrectly serializes years prior to 0 as negative\n              // four-digit years instead of six-digit years. Credits: @Yaffle.\n              stringify(new Date(-621987552e5)) == '\"-000001-01-01T00:00:00.000Z\"' &&\n              // Safari <= 5.1.5 and Opera >= 10.53 incorrectly serialize millisecond\n              // values less than 1000. Credits: @Yaffle.\n              stringify(new Date(-1)) == '\"1969-12-31T23:59:59.999Z\"';\n          });\n        }\n      } else {\n        var value, serialized = '{\"a\":[1,true,false,null,\"\\\\u0000\\\\b\\\\n\\\\f\\\\r\\\\t\"]}';\n        // Test `JSON.stringify`.\n        if (name == \"json-stringify\") {\n          var stringify = exports.stringify, stringifySupported = typeof stringify == \"function\";\n          if (stringifySupported) {\n            // A test function object with a custom `toJSON` method.\n            (value = function () {\n              return 1;\n            }).toJSON = value;\n            attempt(function () {\n              stringifySupported =\n                // Firefox 3.1b1 and b2 serialize string, number, and boolean\n                // primitives as object literals.\n                stringify(0) === \"0\" &&\n                // FF 3.1b1, b2, and JSON 2 serialize wrapped primitives as object\n                // literals.\n                stringify(new Number()) === \"0\" &&\n                stringify(new String()) == '\"\"' &&\n                // FF 3.1b1, 2 throw an error if the value is `null`, `undefined`, or\n                // does not define a canonical JSON representation (this applies to\n                // objects with `toJSON` properties as well, *unless* they are nested\n                // within an object or array).\n                stringify(getClass) === undefined &&\n                // IE 8 serializes `undefined` as `\"undefined\"`. Safari <= 5.1.7 and\n                // FF 3.1b3 pass this test.\n                stringify(undefined) === undefined &&\n                // Safari <= 5.1.7 and FF 3.1b3 throw `Error`s and `TypeError`s,\n                // respectively, if the value is omitted entirely.\n                stringify() === undefined &&\n                // FF 3.1b1, 2 throw an error if the given value is not a number,\n                // string, array, object, Boolean, or `null` literal. This applies to\n                // objects with custom `toJSON` methods as well, unless they are nested\n                // inside object or array literals. YUI 3.0.0b1 ignores custom `toJSON`\n                // methods entirely.\n                stringify(value) === \"1\" &&\n                stringify([value]) == \"[1]\" &&\n                // Prototype <= 1.6.1 serializes `[undefined]` as `\"[]\"` instead of\n                // `\"[null]\"`.\n                stringify([undefined]) == \"[null]\" &&\n                // YUI 3.0.0b1 fails to serialize `null` literals.\n                stringify(null) == \"null\" &&\n                // FF 3.1b1, 2 halts serialization if an array contains a function:\n                // `[1, true, getClass, 1]` serializes as \"[1,true,],\". FF 3.1b3\n                // elides non-JSON values from objects and arrays, unless they\n                // define custom `toJSON` methods.\n                stringify([undefined, getClass, null]) == \"[null,null,null]\" &&\n                // Simple serialization test. FF 3.1b1 uses Unicode escape sequences\n                // where character escape codes are expected (e.g., `\\b` => `\\u0008`).\n                stringify({ \"a\": [value, true, false, null, \"\\x00\\b\\n\\f\\r\\t\"] }) == serialized &&\n                // FF 3.1b1 and b2 ignore the `filter` and `width` arguments.\n                stringify(null, value) === \"1\" &&\n                stringify([1, 2], null, 1) == \"[\\n 1,\\n 2\\n]\";\n            }, function () {\n              stringifySupported = false;\n            });\n          }\n          isSupported = stringifySupported;\n        }\n        // Test `JSON.parse`.\n        if (name == \"json-parse\") {\n          var parse = exports.parse, parseSupported;\n          if (typeof parse == \"function\") {\n            attempt(function () {\n              // FF 3.1b1, b2 will throw an exception if a bare literal is provided.\n              // Conforming implementations should also coerce the initial argument to\n              // a string prior to parsing.\n              if (parse(\"0\") === 0 && !parse(false)) {\n                // Simple parsing test.\n                value = parse(serialized);\n                parseSupported = value[\"a\"].length == 5 && value[\"a\"][0] === 1;\n                if (parseSupported) {\n                  attempt(function () {\n                    // Safari <= 5.1.2 and FF 3.1b1 allow unescaped tabs in strings.\n                    parseSupported = !parse('\"\\t\"');\n                  });\n                  if (parseSupported) {\n                    attempt(function () {\n                      // FF 4.0 and 4.0.1 allow leading `+` signs and leading\n                      // decimal points. FF 4.0, 4.0.1, and IE 9-10 also allow\n                      // certain octal literals.\n                      parseSupported = parse(\"01\") !== 1;\n                    });\n                  }\n                  if (parseSupported) {\n                    attempt(function () {\n                      // FF 4.0, 4.0.1, and Rhino 1.7R3-R4 allow trailing decimal\n                      // points. These environments, along with FF 3.1b1 and 2,\n                      // also allow trailing commas in JSON objects and arrays.\n                      parseSupported = parse(\"1.\") !== 1;\n                    });\n                  }\n                }\n              }\n            }, function () {\n              parseSupported = false;\n            });\n          }\n          isSupported = parseSupported;\n        }\n      }\n      return has[name] = !!isSupported;\n    }\n    has[\"bug-string-char-index\"] = has[\"date-serialization\"] = has[\"json\"] = has[\"json-stringify\"] = has[\"json-parse\"] = null;\n\n    if (!has(\"json\")) {\n      // Common `[[Class]]` name aliases.\n      var functionClass = \"[object Function]\",\n          dateClass = \"[object Date]\",\n          numberClass = \"[object Number]\",\n          stringClass = \"[object String]\",\n          arrayClass = \"[object Array]\",\n          booleanClass = \"[object Boolean]\";\n\n      // Detect incomplete support for accessing string characters by index.\n      var charIndexBuggy = has(\"bug-string-char-index\");\n\n      // Internal: Normalizes the `for...in` iteration algorithm across\n      // environments. Each enumerated key is yielded to a `callback` function.\n      var forOwn = function (object, callback) {\n        var size = 0, Properties, dontEnums, property;\n\n        // Tests for bugs in the current environment's `for...in` algorithm. The\n        // `valueOf` property inherits the non-enumerable flag from\n        // `Object.prototype` in older versions of IE, Netscape, and Mozilla.\n        (Properties = function () {\n          this.valueOf = 0;\n        }).prototype.valueOf = 0;\n\n        // Iterate over a new instance of the `Properties` class.\n        dontEnums = new Properties();\n        for (property in dontEnums) {\n          // Ignore all properties inherited from `Object.prototype`.\n          if (isProperty.call(dontEnums, property)) {\n            size++;\n          }\n        }\n        Properties = dontEnums = null;\n\n        // Normalize the iteration algorithm.\n        if (!size) {\n          // A list of non-enumerable properties inherited from `Object.prototype`.\n          dontEnums = [\"valueOf\", \"toString\", \"toLocaleString\", \"propertyIsEnumerable\", \"isPrototypeOf\", \"hasOwnProperty\", \"constructor\"];\n          // IE <= 8, Mozilla 1.0, and Netscape 6.2 ignore shadowed non-enumerable\n          // properties.\n          forOwn = function (object, callback) {\n            var isFunction = getClass.call(object) == functionClass, property, length;\n            var hasProperty = !isFunction && typeof object.constructor != \"function\" && objectTypes[typeof object.hasOwnProperty] && object.hasOwnProperty || isProperty;\n            for (property in object) {\n              // Gecko <= 1.0 enumerates the `prototype` property of functions under\n              // certain conditions; IE does not.\n              if (!(isFunction && property == \"prototype\") && hasProperty.call(object, property)) {\n                callback(property);\n              }\n            }\n            // Manually invoke the callback for each non-enumerable property.\n            for (length = dontEnums.length; property = dontEnums[--length];) {\n              if (hasProperty.call(object, property)) {\n                callback(property);\n              }\n            }\n          };\n        } else {\n          // No bugs detected; use the standard `for...in` algorithm.\n          forOwn = function (object, callback) {\n            var isFunction = getClass.call(object) == functionClass, property, isConstructor;\n            for (property in object) {\n              if (!(isFunction && property == \"prototype\") && isProperty.call(object, property) && !(isConstructor = property === \"constructor\")) {\n                callback(property);\n              }\n            }\n            // Manually invoke the callback for the `constructor` property due to\n            // cross-environment inconsistencies.\n            if (isConstructor || isProperty.call(object, (property = \"constructor\"))) {\n              callback(property);\n            }\n          };\n        }\n        return forOwn(object, callback);\n      };\n\n      // Public: Serializes a JavaScript `value` as a JSON string. The optional\n      // `filter` argument may specify either a function that alters how object and\n      // array members are serialized, or an array of strings and numbers that\n      // indicates which properties should be serialized. The optional `width`\n      // argument may be either a string or number that specifies the indentation\n      // level of the output.\n      if (!has(\"json-stringify\") && !has(\"date-serialization\")) {\n        // Internal: A map of control characters and their escaped equivalents.\n        var Escapes = {\n          92: \"\\\\\\\\\",\n          34: '\\\\\"',\n          8: \"\\\\b\",\n          12: \"\\\\f\",\n          10: \"\\\\n\",\n          13: \"\\\\r\",\n          9: \"\\\\t\"\n        };\n\n        // Internal: Converts `value` into a zero-padded string such that its\n        // length is at least equal to `width`. The `width` must be <= 6.\n        var leadingZeroes = \"000000\";\n        var toPaddedString = function (width, value) {\n          // The `|| 0` expression is necessary to work around a bug in\n          // Opera <= 7.54u2 where `0 == -0`, but `String(-0) !== \"0\"`.\n          return (leadingZeroes + (value || 0)).slice(-width);\n        };\n\n        // Internal: Serializes a date object.\n        var serializeDate = function (value) {\n          var getData, year, month, date, time, hours, minutes, seconds, milliseconds;\n          // Define additional utility methods if the `Date` methods are buggy.\n          if (!isExtended) {\n            var floor = Math.floor;\n            // A mapping between the months of the year and the number of days between\n            // January 1st and the first of the respective month.\n            var Months = [0, 31, 59, 90, 120, 151, 181, 212, 243, 273, 304, 334];\n            // Internal: Calculates the number of days between the Unix epoch and the\n            // first day of the given month.\n            var getDay = function (year, month) {\n              return Months[month] + 365 * (year - 1970) + floor((year - 1969 + (month = +(month > 1))) / 4) - floor((year - 1901 + month) / 100) + floor((year - 1601 + month) / 400);\n            };\n            getData = function (value) {\n              // Manually compute the year, month, date, hours, minutes,\n              // seconds, and milliseconds if the `getUTC*` methods are\n              // buggy. Adapted from @Yaffle's `date-shim` project.\n              date = floor(value / 864e5);\n              for (year = floor(date / 365.2425) + 1970 - 1; getDay(year + 1, 0) <= date; year++);\n              for (month = floor((date - getDay(year, 0)) / 30.42); getDay(year, month + 1) <= date; month++);\n              date = 1 + date - getDay(year, month);\n              // The `time` value specifies the time within the day (see ES\n              // 5.1 section 15.9.1.2). The formula `(A % B + B) % B` is used\n              // to compute `A modulo B`, as the `%` operator does not\n              // correspond to the `modulo` operation for negative numbers.\n              time = (value % 864e5 + 864e5) % 864e5;\n              // The hours, minutes, seconds, and milliseconds are obtained by\n              // decomposing the time within the day. See section 15.9.1.10.\n              hours = floor(time / 36e5) % 24;\n              minutes = floor(time / 6e4) % 60;\n              seconds = floor(time / 1e3) % 60;\n              milliseconds = time % 1e3;\n            };\n          } else {\n            getData = function (value) {\n              year = value.getUTCFullYear();\n              month = value.getUTCMonth();\n              date = value.getUTCDate();\n              hours = value.getUTCHours();\n              minutes = value.getUTCMinutes();\n              seconds = value.getUTCSeconds();\n              milliseconds = value.getUTCMilliseconds();\n            };\n          }\n          serializeDate = function (value) {\n            if (value > -1 / 0 && value < 1 / 0) {\n              // Dates are serialized according to the `Date#toJSON` method\n              // specified in ES 5.1 section 15.9.5.44. See section 15.9.1.15\n              // for the ISO 8601 date time string format.\n              getData(value);\n              // Serialize extended years correctly.\n              value = (year <= 0 || year >= 1e4 ? (year < 0 ? \"-\" : \"+\") + toPaddedString(6, year < 0 ? -year : year) : toPaddedString(4, year)) +\n              \"-\" + toPaddedString(2, month + 1) + \"-\" + toPaddedString(2, date) +\n              // Months, dates, hours, minutes, and seconds should have two\n              // digits; milliseconds should have three.\n              \"T\" + toPaddedString(2, hours) + \":\" + toPaddedString(2, minutes) + \":\" + toPaddedString(2, seconds) +\n              // Milliseconds are optional in ES 5.0, but required in 5.1.\n              \".\" + toPaddedString(3, milliseconds) + \"Z\";\n              year = month = date = hours = minutes = seconds = milliseconds = null;\n            } else {\n              value = null;\n            }\n            return value;\n          };\n          return serializeDate(value);\n        };\n\n        // For environments with `JSON.stringify` but buggy date serialization,\n        // we override the native `Date#toJSON` implementation with a\n        // spec-compliant one.\n        if (has(\"json-stringify\") && !has(\"date-serialization\")) {\n          // Internal: the `Date#toJSON` implementation used to override the native one.\n          function dateToJSON (key) {\n            return serializeDate(this);\n          }\n\n          // Public: `JSON.stringify`. See ES 5.1 section 15.12.3.\n          var nativeStringify = exports.stringify;\n          exports.stringify = function (source, filter, width) {\n            var nativeToJSON = Date.prototype.toJSON;\n            Date.prototype.toJSON = dateToJSON;\n            var result = nativeStringify(source, filter, width);\n            Date.prototype.toJSON = nativeToJSON;\n            return result;\n          }\n        } else {\n          // Internal: Double-quotes a string `value`, replacing all ASCII control\n          // characters (characters with code unit values between 0 and 31) with\n          // their escaped equivalents. This is an implementation of the\n          // `Quote(value)` operation defined in ES 5.1 section 15.12.3.\n          var unicodePrefix = \"\\\\u00\";\n          var escapeChar = function (character) {\n            var charCode = character.charCodeAt(0), escaped = Escapes[charCode];\n            if (escaped) {\n              return escaped;\n            }\n            return unicodePrefix + toPaddedString(2, charCode.toString(16));\n          };\n          var reEscape = /[\\x00-\\x1f\\x22\\x5c]/g;\n          var quote = function (value) {\n            reEscape.lastIndex = 0;\n            return '\"' +\n              (\n                reEscape.test(value)\n                  ? value.replace(reEscape, escapeChar)\n                  : value\n              ) +\n              '\"';\n          };\n\n          // Internal: Recursively serializes an object. Implements the\n          // `Str(key, holder)`, `JO(value)`, and `JA(value)` operations.\n          var serialize = function (property, object, callback, properties, whitespace, indentation, stack) {\n            var value, type, className, results, element, index, length, prefix, result;\n            attempt(function () {\n              // Necessary for host object support.\n              value = object[property];\n            });\n            if (typeof value == \"object\" && value) {\n              if (value.getUTCFullYear && getClass.call(value) == dateClass && value.toJSON === Date.prototype.toJSON) {\n                value = serializeDate(value);\n              } else if (typeof value.toJSON == \"function\") {\n                value = value.toJSON(property);\n              }\n            }\n            if (callback) {\n              // If a replacement function was provided, call it to obtain the value\n              // for serialization.\n              value = callback.call(object, property, value);\n            }\n            // Exit early if value is `undefined` or `null`.\n            if (value == undefined) {\n              return value === undefined ? value : \"null\";\n            }\n            type = typeof value;\n            // Only call `getClass` if the value is an object.\n            if (type == \"object\") {\n              className = getClass.call(value);\n            }\n            switch (className || type) {\n              case \"boolean\":\n              case booleanClass:\n                // Booleans are represented literally.\n                return \"\" + value;\n              case \"number\":\n              case numberClass:\n                // JSON numbers must be finite. `Infinity` and `NaN` are serialized as\n                // `\"null\"`.\n                return value > -1 / 0 && value < 1 / 0 ? \"\" + value : \"null\";\n              case \"string\":\n              case stringClass:\n                // Strings are double-quoted and escaped.\n                return quote(\"\" + value);\n            }\n            // Recursively serialize objects and arrays.\n            if (typeof value == \"object\") {\n              // Check for cyclic structures. This is a linear search; performance\n              // is inversely proportional to the number of unique nested objects.\n              for (length = stack.length; length--;) {\n                if (stack[length] === value) {\n                  // Cyclic structures cannot be serialized by `JSON.stringify`.\n                  throw TypeError();\n                }\n              }\n              // Add the object to the stack of traversed objects.\n              stack.push(value);\n              results = [];\n              // Save the current indentation level and indent one additional level.\n              prefix = indentation;\n              indentation += whitespace;\n              if (className == arrayClass) {\n                // Recursively serialize array elements.\n                for (index = 0, length = value.length; index < length; index++) {\n                  element = serialize(index, value, callback, properties, whitespace, indentation, stack);\n                  results.push(element === undefined ? \"null\" : element);\n                }\n                result = results.length ? (whitespace ? \"[\\n\" + indentation + results.join(\",\\n\" + indentation) + \"\\n\" + prefix + \"]\" : (\"[\" + results.join(\",\") + \"]\")) : \"[]\";\n              } else {\n                // Recursively serialize object members. Members are selected from\n                // either a user-specified list of property names, or the object\n                // itself.\n                forOwn(properties || value, function (property) {\n                  var element = serialize(property, value, callback, properties, whitespace, indentation, stack);\n                  if (element !== undefined) {\n                    // According to ES 5.1 section 15.12.3: \"If `gap` {whitespace}\n                    // is not the empty string, let `member` {quote(property) + \":\"}\n                    // be the concatenation of `member` and the `space` character.\"\n                    // The \"`space` character\" refers to the literal space\n                    // character, not the `space` {width} argument provided to\n                    // `JSON.stringify`.\n                    results.push(quote(property) + \":\" + (whitespace ? \" \" : \"\") + element);\n                  }\n                });\n                result = results.length ? (whitespace ? \"{\\n\" + indentation + results.join(\",\\n\" + indentation) + \"\\n\" + prefix + \"}\" : (\"{\" + results.join(\",\") + \"}\")) : \"{}\";\n              }\n              // Remove the object from the traversed object stack.\n              stack.pop();\n              return result;\n            }\n          };\n\n          // Public: `JSON.stringify`. See ES 5.1 section 15.12.3.\n          exports.stringify = function (source, filter, width) {\n            var whitespace, callback, properties, className;\n            if (objectTypes[typeof filter] && filter) {\n              className = getClass.call(filter);\n              if (className == functionClass) {\n                callback = filter;\n              } else if (className == arrayClass) {\n                // Convert the property names array into a makeshift set.\n                properties = {};\n                for (var index = 0, length = filter.length, value; index < length;) {\n                  value = filter[index++];\n                  className = getClass.call(value);\n                  if (className == \"[object String]\" || className == \"[object Number]\") {\n                    properties[value] = 1;\n                  }\n                }\n              }\n            }\n            if (width) {\n              className = getClass.call(width);\n              if (className == numberClass) {\n                // Convert the `width` to an integer and create a string containing\n                // `width` number of space characters.\n                if ((width -= width % 1) > 0) {\n                  if (width > 10) {\n                    width = 10;\n                  }\n                  for (whitespace = \"\"; whitespace.length < width;) {\n                    whitespace += \" \";\n                  }\n                }\n              } else if (className == stringClass) {\n                whitespace = width.length <= 10 ? width : width.slice(0, 10);\n              }\n            }\n            // Opera <= 7.54u2 discards the values associated with empty string keys\n            // (`\"\"`) only if they are used directly within an object member list\n            // (e.g., `!(\"\" in { \"\": 1})`).\n            return serialize(\"\", (value = {}, value[\"\"] = source, value), callback, properties, whitespace, \"\", []);\n          };\n        }\n      }\n\n      // Public: Parses a JSON source string.\n      if (!has(\"json-parse\")) {\n        var fromCharCode = String.fromCharCode;\n\n        // Internal: A map of escaped control characters and their unescaped\n        // equivalents.\n        var Unescapes = {\n          92: \"\\\\\",\n          34: '\"',\n          47: \"/\",\n          98: \"\\b\",\n          116: \"\\t\",\n          110: \"\\n\",\n          102: \"\\f\",\n          114: \"\\r\"\n        };\n\n        // Internal: Stores the parser state.\n        var Index, Source;\n\n        // Internal: Resets the parser state and throws a `SyntaxError`.\n        var abort = function () {\n          Index = Source = null;\n          throw SyntaxError();\n        };\n\n        // Internal: Returns the next token, or `\"$\"` if the parser has reached\n        // the end of the source string. A token may be a string, number, `null`\n        // literal, or Boolean literal.\n        var lex = function () {\n          var source = Source, length = source.length, value, begin, position, isSigned, charCode;\n          while (Index < length) {\n            charCode = source.charCodeAt(Index);\n            switch (charCode) {\n              case 9: case 10: case 13: case 32:\n                // Skip whitespace tokens, including tabs, carriage returns, line\n                // feeds, and space characters.\n                Index++;\n                break;\n              case 123: case 125: case 91: case 93: case 58: case 44:\n                // Parse a punctuator token (`{`, `}`, `[`, `]`, `:`, or `,`) at\n                // the current position.\n                value = charIndexBuggy ? source.charAt(Index) : source[Index];\n                Index++;\n                return value;\n              case 34:\n                // `\"` delimits a JSON string; advance to the next character and\n                // begin parsing the string. String tokens are prefixed with the\n                // sentinel `@` character to distinguish them from punctuators and\n                // end-of-string tokens.\n                for (value = \"@\", Index++; Index < length;) {\n                  charCode = source.charCodeAt(Index);\n                  if (charCode < 32) {\n                    // Unescaped ASCII control characters (those with a code unit\n                    // less than the space character) are not permitted.\n                    abort();\n                  } else if (charCode == 92) {\n                    // A reverse solidus (`\\`) marks the beginning of an escaped\n                    // control character (including `\"`, `\\`, and `/`) or Unicode\n                    // escape sequence.\n                    charCode = source.charCodeAt(++Index);\n                    switch (charCode) {\n                      case 92: case 34: case 47: case 98: case 116: case 110: case 102: case 114:\n                        // Revive escaped control characters.\n                        value += Unescapes[charCode];\n                        Index++;\n                        break;\n                      case 117:\n                        // `\\u` marks the beginning of a Unicode escape sequence.\n                        // Advance to the first character and validate the\n                        // four-digit code point.\n                        begin = ++Index;\n                        for (position = Index + 4; Index < position; Index++) {\n                          charCode = source.charCodeAt(Index);\n                          // A valid sequence comprises four hexdigits (case-\n                          // insensitive) that form a single hexadecimal value.\n                          if (!(charCode >= 48 && charCode <= 57 || charCode >= 97 && charCode <= 102 || charCode >= 65 && charCode <= 70)) {\n                            // Invalid Unicode escape sequence.\n                            abort();\n                          }\n                        }\n                        // Revive the escaped character.\n                        value += fromCharCode(\"0x\" + source.slice(begin, Index));\n                        break;\n                      default:\n                        // Invalid escape sequence.\n                        abort();\n                    }\n                  } else {\n                    if (charCode == 34) {\n                      // An unescaped double-quote character marks the end of the\n                      // string.\n                      break;\n                    }\n                    charCode = source.charCodeAt(Index);\n                    begin = Index;\n                    // Optimize for the common case where a string is valid.\n                    while (charCode >= 32 && charCode != 92 && charCode != 34) {\n                      charCode = source.charCodeAt(++Index);\n                    }\n                    // Append the string as-is.\n                    value += source.slice(begin, Index);\n                  }\n                }\n                if (source.charCodeAt(Index) == 34) {\n                  // Advance to the next character and return the revived string.\n                  Index++;\n                  return value;\n                }\n                // Unterminated string.\n                abort();\n              default:\n                // Parse numbers and literals.\n                begin = Index;\n                // Advance past the negative sign, if one is specified.\n                if (charCode == 45) {\n                  isSigned = true;\n                  charCode = source.charCodeAt(++Index);\n                }\n                // Parse an integer or floating-point value.\n                if (charCode >= 48 && charCode <= 57) {\n                  // Leading zeroes are interpreted as octal literals.\n                  if (charCode == 48 && ((charCode = source.charCodeAt(Index + 1)), charCode >= 48 && charCode <= 57)) {\n                    // Illegal octal literal.\n                    abort();\n                  }\n                  isSigned = false;\n                  // Parse the integer component.\n                  for (; Index < length && ((charCode = source.charCodeAt(Index)), charCode >= 48 && charCode <= 57); Index++);\n                  // Floats cannot contain a leading decimal point; however, this\n                  // case is already accounted for by the parser.\n                  if (source.charCodeAt(Index) == 46) {\n                    position = ++Index;\n                    // Parse the decimal component.\n                    for (; position < length; position++) {\n                      charCode = source.charCodeAt(position);\n                      if (charCode < 48 || charCode > 57) {\n                        break;\n                      }\n                    }\n                    if (position == Index) {\n                      // Illegal trailing decimal.\n                      abort();\n                    }\n                    Index = position;\n                  }\n                  // Parse exponents. The `e` denoting the exponent is\n                  // case-insensitive.\n                  charCode = source.charCodeAt(Index);\n                  if (charCode == 101 || charCode == 69) {\n                    charCode = source.charCodeAt(++Index);\n                    // Skip past the sign following the exponent, if one is\n                    // specified.\n                    if (charCode == 43 || charCode == 45) {\n                      Index++;\n                    }\n                    // Parse the exponential component.\n                    for (position = Index; position < length; position++) {\n                      charCode = source.charCodeAt(position);\n                      if (charCode < 48 || charCode > 57) {\n                        break;\n                      }\n                    }\n                    if (position == Index) {\n                      // Illegal empty exponent.\n                      abort();\n                    }\n                    Index = position;\n                  }\n                  // Coerce the parsed value to a JavaScript number.\n                  return +source.slice(begin, Index);\n                }\n                // A negative sign may only precede numbers.\n                if (isSigned) {\n                  abort();\n                }\n                // `true`, `false`, and `null` literals.\n                var temp = source.slice(Index, Index + 4);\n                if (temp == \"true\") {\n                  Index += 4;\n                  return true;\n                } else if (temp == \"fals\" && source.charCodeAt(Index + 4 ) == 101) {\n                  Index += 5;\n                  return false;\n                } else if (temp == \"null\") {\n                  Index += 4;\n                  return null;\n                }\n                // Unrecognized token.\n                abort();\n            }\n          }\n          // Return the sentinel `$` character if the parser has reached the end\n          // of the source string.\n          return \"$\";\n        };\n\n        // Internal: Parses a JSON `value` token.\n        var get = function (value) {\n          var results, hasMembers;\n          if (value == \"$\") {\n            // Unexpected end of input.\n            abort();\n          }\n          if (typeof value == \"string\") {\n            if ((charIndexBuggy ? value.charAt(0) : value[0]) == \"@\") {\n              // Remove the sentinel `@` character.\n              return value.slice(1);\n            }\n            // Parse object and array literals.\n            if (value == \"[\") {\n              // Parses a JSON array, returning a new JavaScript array.\n              results = [];\n              for (;;) {\n                value = lex();\n                // A closing square bracket marks the end of the array literal.\n                if (value == \"]\") {\n                  break;\n                }\n                // If the array literal contains elements, the current token\n                // should be a comma separating the previous element from the\n                // next.\n                if (hasMembers) {\n                  if (value == \",\") {\n                    value = lex();\n                    if (value == \"]\") {\n                      // Unexpected trailing `,` in array literal.\n                      abort();\n                    }\n                  } else {\n                    // A `,` must separate each array element.\n                    abort();\n                  }\n                } else {\n                  hasMembers = true;\n                }\n                // Elisions and leading commas are not permitted.\n                if (value == \",\") {\n                  abort();\n                }\n                results.push(get(value));\n              }\n              return results;\n            } else if (value == \"{\") {\n              // Parses a JSON object, returning a new JavaScript object.\n              results = {};\n              for (;;) {\n                value = lex();\n                // A closing curly brace marks the end of the object literal.\n                if (value == \"}\") {\n                  break;\n                }\n                // If the object literal contains members, the current token\n                // should be a comma separator.\n                if (hasMembers) {\n                  if (value == \",\") {\n                    value = lex();\n                    if (value == \"}\") {\n                      // Unexpected trailing `,` in object literal.\n                      abort();\n                    }\n                  } else {\n                    // A `,` must separate each object member.\n                    abort();\n                  }\n                } else {\n                  hasMembers = true;\n                }\n                // Leading commas are not permitted, object property names must be\n                // double-quoted strings, and a `:` must separate each property\n                // name and value.\n                if (value == \",\" || typeof value != \"string\" || (charIndexBuggy ? value.charAt(0) : value[0]) != \"@\" || lex() != \":\") {\n                  abort();\n                }\n                results[value.slice(1)] = get(lex());\n              }\n              return results;\n            }\n            // Unexpected token encountered.\n            abort();\n          }\n          return value;\n        };\n\n        // Internal: Updates a traversed object member.\n        var update = function (source, property, callback) {\n          var element = walk(source, property, callback);\n          if (element === undefined) {\n            delete source[property];\n          } else {\n            source[property] = element;\n          }\n        };\n\n        // Internal: Recursively traverses a parsed JSON object, invoking the\n        // `callback` function for each value. This is an implementation of the\n        // `Walk(holder, name)` operation defined in ES 5.1 section 15.12.2.\n        var walk = function (source, property, callback) {\n          var value = source[property], length;\n          if (typeof value == \"object\" && value) {\n            // `forOwn` can't be used to traverse an array in Opera <= 8.54\n            // because its `Object#hasOwnProperty` implementation returns `false`\n            // for array indices (e.g., `![1, 2, 3].hasOwnProperty(\"0\")`).\n            if (getClass.call(value) == arrayClass) {\n              for (length = value.length; length--;) {\n                update(getClass, forOwn, value, length, callback);\n              }\n            } else {\n              forOwn(value, function (property) {\n                update(value, property, callback);\n              });\n            }\n          }\n          return callback.call(source, property, value);\n        };\n\n        // Public: `JSON.parse`. See ES 5.1 section 15.12.2.\n        exports.parse = function (source, callback) {\n          var result, value;\n          Index = 0;\n          Source = \"\" + source;\n          result = get(lex());\n          // If a JSON string contains multiple tokens, it is invalid.\n          if (lex() != \"$\") {\n            abort();\n          }\n          // Reset the parser state.\n          Index = Source = null;\n          return callback && getClass.call(callback) == functionClass ? walk((value = {}, value[\"\"] = result, value), \"\", callback) : result;\n        };\n      }\n    }\n\n    exports.runInContext = runInContext;\n    return exports;\n  }\n\n  if (freeExports && !isLoader) {\n    // Export for CommonJS environments.\n    runInContext(root, freeExports);\n  } else {\n    // Export for web browsers and JavaScript engines.\n    var nativeJSON = root.JSON,\n        previousJSON = root.JSON3,\n        isRestored = false;\n\n    var JSON3 = runInContext(root, (root.JSON3 = {\n      // Public: Restores the original value of the global `JSON` object and\n      // returns a reference to the `JSON3` object.\n      \"noConflict\": function () {\n        if (!isRestored) {\n          isRestored = true;\n          root.JSON = nativeJSON;\n          root.JSON3 = previousJSON;\n          nativeJSON = previousJSON = null;\n        }\n        return JSON3;\n      }\n    }));\n\n    root.JSON = {\n      \"parse\": JSON3.parse,\n      \"stringify\": JSON3.stringify\n    };\n  }\n\n  // Export for asynchronous module loaders.\n  if (isLoader) {\n    define(function () {\n      return JSON3;\n    });\n  }\n}).call(this);\n","'use strict';\n\nvar origSymbol = global.Symbol;\nvar hasSymbolSham = require('./shams');\n\nmodule.exports = function hasNativeSymbols() {\n\tif (typeof origSymbol !== 'function') { return false; }\n\tif (typeof Symbol !== 'function') { return false; }\n\tif (typeof origSymbol('foo') !== 'symbol') { return false; }\n\tif (typeof Symbol('bar') !== 'symbol') { return false; }\n\n\treturn hasSymbolSham();\n};\n","'use strict';\n\n/* eslint complexity: [2, 17], max-statements: [2, 33] */\nmodule.exports = function hasSymbols() {\n\tif (typeof Symbol !== 'function' || typeof Object.getOwnPropertySymbols !== 'function') { return false; }\n\tif (typeof Symbol.iterator === 'symbol') { return true; }\n\n\tvar obj = {};\n\tvar sym = Symbol('test');\n\tvar symObj = Object(sym);\n\tif (typeof sym === 'string') { return false; }\n\n\tif (Object.prototype.toString.call(sym) !== '[object Symbol]') { return false; }\n\tif (Object.prototype.toString.call(symObj) !== '[object Symbol]') { return false; }\n\n\t// temp disabled per https://github.com/ljharb/object.assign/issues/17\n\t// if (sym instanceof Symbol) { return false; }\n\t// temp disabled per https://github.com/WebReflection/get-own-property-symbols/issues/4\n\t// if (!(symObj instanceof Symbol)) { return false; }\n\n\t// if (typeof Symbol.prototype.toString !== 'function') { return false; }\n\t// if (String(sym) !== Symbol.prototype.toString.call(sym)) { return false; }\n\n\tvar symVal = 42;\n\tobj[sym] = symVal;\n\tfor (sym in obj) { return false; } // eslint-disable-line no-restricted-syntax\n\tif (typeof Object.keys === 'function' && Object.keys(obj).length !== 0) { return false; }\n\n\tif (typeof Object.getOwnPropertyNames === 'function' && Object.getOwnPropertyNames(obj).length !== 0) { return false; }\n\n\tvar syms = Object.getOwnPropertySymbols(obj);\n\tif (syms.length !== 1 || syms[0] !== sym) { return false; }\n\n\tif (!Object.prototype.propertyIsEnumerable.call(obj, sym)) { return false; }\n\n\tif (typeof Object.getOwnPropertyDescriptor === 'function') {\n\t\tvar descriptor = Object.getOwnPropertyDescriptor(obj, sym);\n\t\tif (descriptor.value !== symVal || descriptor.enumerable !== true) { return false; }\n\t}\n\n\treturn true;\n};\n","module.exports = function(module) {\n\tif (!module.webpackPolyfill) {\n\t\tmodule.deprecate = function() {};\n\t\tmodule.paths = [];\n\t\t// module.parent = undefined by default\n\t\tif (!module.children) module.children = [];\n\t\tObject.defineProperty(module, \"loaded\", {\n\t\t\tenumerable: true,\n\t\t\tget: function() {\n\t\t\t\treturn module.l;\n\t\t\t}\n\t\t});\n\t\tObject.defineProperty(module, \"id\", {\n\t\t\tenumerable: true,\n\t\t\tget: function() {\n\t\t\t\treturn module.i;\n\t\t\t}\n\t\t});\n\t\tmodule.webpackPolyfill = 1;\n\t}\n\treturn module;\n};\n","/* globals __webpack_amd_options__ */\nmodule.exports = __webpack_amd_options__;\n","/**\n * This method attempts to invoke the function, returning either the result or\n * the caught error object. Any additional arguments are provided to the\n * function when it's invoked.\n *\n * @param {Function} [fn] - The function to attempt.\n * @param {...*} [args] - The arguments to invoke the function with.\n * @returns {object} Returns an object of the result.\n */\nconst attempt = function attempt(fn, ...args) {\n  try {\n    return {\n      threw: false,\n      /* eslint-disable-next-line babel/no-invalid-this */\n      value: fn.apply(this, args),\n    };\n  } catch (e) {\n    return {\n      threw: true,\n      value: e,\n    };\n  }\n};\n\nexport default attempt;\n","import attempt from 'attempt-x';\nimport isSymbol from 'is-symbol';\n\nconst hasSymbolSupport = attempt(() => {\n  /* eslint-disable-next-line compat/compat */\n  return typeof Symbol === 'function' && isSymbol(Symbol(''));\n});\n\n/**\n * Indicates if `Symbol`exists and creates the correct type.\n * `true`, if it exists and creates the correct type, otherwise `false`.\n *\n * @type boolean\n */\nexport default hasSymbolSupport.threw === false && hasSymbolSupport.value === true;\n","import hasSymbols from 'has-symbol-support-x';\nimport isSymbol from 'is-symbol';\n\n/* eslint-disable-next-line compat/compat */\nconst pToString = hasSymbols && Symbol.prototype.toString;\nconst isSymbolFn = typeof pToString === 'function' && isSymbol;\n/** @type {Function} */\nconst castString = ''.constructor;\n\n/**\n * The abstract operation ToString converts argument to a value of type String,\n * however the specification states that if the argument is a Symbol then a\n * 'TypeError' is thrown. This version also allows Symbols be converted to\n * a string. Other uncoercible exotics will still throw though.\n *\n * @param {*} [value] - The value to convert to a string.\n * @returns {string} The converted value.\n */\nconst toStringSymbolsSupported = function toStringSymbolsSupported(value) {\n  return isSymbolFn && isSymbolFn(value) ? pToString.call(value) : castString(value);\n};\n\nexport default toStringSymbolsSupported;\n","import safeToString from 'to-string-symbols-supported-x';\nimport {stringify} from 'json3';\n\n// If the string contains no control characters, no quote characters, and no\n// backslash characters, then we can safely slap some quotes around it.\n// Otherwise we must also replace the offending characters with safe escape\n// sequences.\n\n/**\n * This method wraps a string in double quotes and replaces control characters\n * with safe escape sequences.\n *\n * @param {string} string - The string to safely wrap in double quotes.\n * @returns {string} The wrapped string.\n */\nconst quote = function quote(string) {\n  return stringify(safeToString(string));\n};\n\nexport default quote;\n"],"sourceRoot":""}